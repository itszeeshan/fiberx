package middlewares

import (
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/golang-jwt/jwt/v5"
)

// NewAuthMiddleware returns a simple JWT middleware that protects routes using a shared secret
func NewAuthMiddleware(secret string) fiber.Handler {
	return func(c *fiber.Ctx) error {
		// Extract the Authorization header (e.g., "Bearer <token>")
		auth := c.Get("Authorization")
		if auth == "" || !strings.HasPrefix(auth, "Bearer ") {
			return c.SendStatus(fiber.StatusUnauthorized)
		}

		// Remove the "Bearer " prefix to get the token string
		tokenStr := strings.TrimPrefix(auth, "Bearer ")

		// Parse and validate the token using the provided secret
		token, err := jwt.Parse(tokenStr, func(t *jwt.Token) (interface{}, error) {
			return []byte(secret), nil // Secret key for HMAC
		})

		// If token is invalid or parsing fails, reject the request
		if err != nil || !token.Valid {
			return c.SendStatus(fiber.StatusUnauthorized)
		}

		// Store the claims in context for downstream access (e.g., inside handlers)
		c.Locals("user", token.Claims)

		// Continue to the next handler
		return c.Next()
	}
}
